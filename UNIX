#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>

#define MAX_COMMAND_LENGTH 100

int main() {
    char command[MAX_COMMAND_LENGTH];
    int status;

    while (1) {
        printf("shell> ");

        if (fgets(command, sizeof(command), stdin) == NULL) {
            printf("\n");
            break;  
        }

        command[strcspn(command, "\n")] = '\0';

        pid_t pid = fork();

        if (pid < 0) {
            perror("fork");
            exit(EXIT_FAILURE);
        } else if (pid == 0) 
        {
            execlp(command, command, (char *) NULL);

            perror("execlp");
            exit(EXIT_FAILURE);
        } else {
           
            waitpid(pid, &status, 0);
            if (WIFEXITED(status)) {
                int exit_status = WEXITSTATUS(status);
                if (exit_status != 0) {
                    fprintf(stderr, "Command '%s' exited with status %d\n", command, exit_status);
                }
            } else if (WIFSIGNALED(status)) {
                int signal = WTERMSIG(status);
                fprintf(stderr, "Command '%s' terminated by signal %d\n", command, signal);
            }
        }
    }

    return 0;
}

